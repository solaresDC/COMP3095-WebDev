# ------------------------------------------------------------------------------------------
# commands
#
# 1.- docker-compose -p comp3095-microservices-ecommerce -f docker-compose-single.yml up -d
#     -- This command will start the containers in detached mode without rebuilding the images (if they exist)
#
#2.- docker-compose -p comp3095-microservices-ecommerce -f docker-compose-single.yml up -d  --build
#    -- this command force the rebuild of all images, even if they already exist, before starting the containers
# ------------------------------------------------------------------------------------------

#version: '3.9'

services:

                        # the order of the containers doesn't really matter

#Product Service
  product-service: #container 1  # dependant on container mongodb
    image: product-service
    container_name: product-service  #container name HAS! to be unique when they are inside the same solution
    ports:
      - "8074:8074"
    build:
      context: ./product-service      #THE DIRECTORY WHERE THE DOCKER FILE RESIDES
      dockerfile: ./Dockerfile        #Specify the dockerfile for use to build image
    environment: #Environment variables
      SPRING_PROFILES_ACTIVE: docker   #application-docker.properties file
    depends_on:
      - mongodb
    networks:
      - spring #this is just a name , a name for the network , you can call it whatever



  #Order-Service
  order-service:
    image: order-service
    container_name: order-service
    ports:
      - "8075:8075"
    build:
      context: ./order-service
      dockerfile: ./Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
    depends_on:
      - postgres-order
    networks:
      - spring


#Inventory Service
  inventory-service:
    image: inventory-service
    container_name: inventory-service
    ports:
      - "8073:8073"
    build:
      context: ./inventory-service
      dockerfile: ./Dockerfile
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://host.docker.internal:5434/inventory-service
      - SPRING_DATASOURCE_USERNAME=admin
      - SPRING_DATASOURCE_PASSWORD=password
      - SPRING_JPA_HIBERNATE_DDL_AUTO=none
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - postgres-inventory
    networks:
      - spring


#  inventory-service:
#    image: inventory-service
#    container_name: inventory-service
#    ports:
#      - "8083:8083"
#    build:
#      context: ./inventory-service
#      dockerfile: ./Dockerfile
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#      - POSTGRES_USER=admin
#      - POSTGRES_PASSWORD=password
#    depends_on:
#      - postgres-inventory
#    networks:
#      - spring






#Product-service Mongodb
  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27019:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes: #mount (Also referred as map) a specific directory
      - ./data/mongo/products:/data/db
      - ./init/mongo/docker-entrypoint-initdb.d/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    # restart: unless-stopped  # this is optional and the usage depends if you want them
                               # to automatically always be running
    command: mongod --auth #authorisation  #mongod -auth
    networks:
      - spring

  mongo-express:
    image: mongo-express:latest
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongodb #connect to mongo-express to the mongodb container by name
    container_name: external_mongo-express
    restart: unless-stopped    #restart unless
    depends_on:
      - mongodb
    networks:
      - spring


  #Postgres for Order, Inventory Service
  postgres-inventory:
    image: postgres
    ports:
      - "5434:5432"
    container_name: postgres-inventory
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=inventory-service
    volumes:
      - ./data/inventory:/var/lib/postgresql/data
      - ./init/inventory/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - spring

  postgres-order:
    image: postgres
    ports:
      - "5432:5432"
    container_name: postgres-order
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=order-service
    volumes:
      - ./data/order:/var/lib/postgresql/data
      - ./init/order/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - spring

  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "8000:80"
    container_name: pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=user@domain.ca
      - PGADMIN_DEFAULT_PASSWORD=password




  #keyCloak
  keycloak:
    container_name: keycloak
    hostname: keycloak
    image: quay.io/keycloak/keycloak:24.0.1
    command: [ "start-dev", "--import-realm" ]
    environment:
      DB_VENDOR: postgres
      DB_ADDR: postgres-keycloak
      DB_DATABASE: keycloak
      DB_USER: admin
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: password
      ROOT_LOGLEVEL: DEBUG
      JBOSS_LOG_MANAGER_ROOT_LOGGER: DEBUG, stdout, FILE
    ports:
      - "8080:8080"
    volumes:
      - ./realms/:/opt/keycloak/data/import
    depends_on:
      - postgres-keycloak
    networks:
      - spring



  postgres-keycloak:
    image: postgres:latest
    ports:
      - "5431:5432"
    container_name: postgres-keycloak
    environment:
      - POSTGRES_DB=keycloak
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - PGDATA=/data/postgres
    volumes:
      - ./data/postgres/keycloak:/var/lib/postgresql/data
    networks:
      - spring

    # Api Gateway
  api-gateway:
    image: api-gateway
    build:
      context: ./api-gateway
      dockerfile: ./Dockerfile
    ports:
      - "9000:9000"
    container_name: api-gateway
    environment:
      SPRING_PROFILES_ACTIVE: docker
    networks:
      - spring



volumes:
  mongodb:
    driver: local #use local driver for persisting data on the host machine

networks:
  spring:
    driver: bridge #bridge networks allows isolated communication between contianers

